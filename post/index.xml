<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 薛定谔的猫</title>
    <link>https://jackwang816.github.io/post/</link>
    <description>Recent content in Posts on 薛定谔的猫</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 23 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://jackwang816.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>链接器系列（一）</title>
      <link>https://jackwang816.github.io/2022/04/linker-series-1/</link>
      <pubDate>Sat, 23 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://jackwang816.github.io/2022/04/linker-series-1/</guid>
      <description>&lt;p&gt;最近打算写一个链接器系列文章，记录一下最近工作和学习的心得，主要介绍一下链接器的基本知识，包括链接器的工作原理，静态链接以及动态链接等内容。
开篇先介绍一下链接器的基本功能，其他的细节会在后面的文章中继续介绍。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>利用 --wrap 链接选项包装函数的技巧</title>
      <link>https://jackwang816.github.io/2022/03/wrap-function-by-linker-option/</link>
      <pubDate>Mon, 28 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://jackwang816.github.io/2022/03/wrap-function-by-linker-option/</guid>
      <description>&lt;p&gt;最近在公司项目中看到一个链接技巧，可以通过链接器的链接选项 &amp;ndash;wrap 来包装一个函数，使得在程序链接的时候链接器自动将对目标函数的引用解析到我们定义的包装函数。通过这个小技巧可以很方便的在不改变代码结构的前提下，通过链接选项来控制具体环境下的函数具体实现方法，替换掉原项目中某些函数的实现。这个技巧在debug以及一些嵌入式项目的单元测试中比较好用。&lt;/p&gt;

&lt;p&gt;话不多说，来看看&amp;ndash;wrap这个链接选项具体的用法吧。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Markdown语法</title>
      <link>https://jackwang816.github.io/2020/12/markdown-grammer/</link>
      <pubDate>Fri, 18 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jackwang816.github.io/2020/12/markdown-grammer/</guid>
      <description></description>
    </item>
    
    <item>
      <title>最大子数组问题Kadane算法</title>
      <link>https://jackwang816.github.io/2020/12/kadane-algorithm/</link>
      <pubDate>Fri, 18 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jackwang816.github.io/2020/12/kadane-algorithm/</guid>
      <description>&lt;p&gt;写这篇文章的目的是分享自己在解Leetcode题目“最大子数组问题”时候，用到的Kadane算法，这是一个典型的动态规划算法示例。&lt;/p&gt;

&lt;p&gt;为了更好的理解Kadane算法，本文章首先介绍暴力破解的方法，然后通过对暴力破解算法的改进，详细介绍Kadane算法的思路，其中会简单介绍动态规划算法。
希望能够帮助读者更好地理解Kadane算法，从而对动态规划算法有更深的理解。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
